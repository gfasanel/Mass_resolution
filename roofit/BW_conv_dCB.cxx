/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#include "Riostream.h" 
#include "BW_conv_dCB.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include "RooMath.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(BW_conv_dCB); 

BW_conv_dCB::BW_conv_dCB(const char *name, const char *title, 
                       RooAbsReal& _m,
                       RooAbsReal& _mRes,
                       RooAbsReal& _m0,
                       RooAbsReal& _sigma,
                       RooAbsReal& _alphaL,
                       RooAbsReal& _alphaR,
                       RooAbsReal& _nL,
                       RooAbsReal& _nR) :
  RooAbsPdf(name,title), 
  m("m","m",this,_m),
  mRes("mRes","mRes",this,_mRes),
  m0("m0","m0",this,_m0),
  sigma("sigma","sigma",this,_sigma),
  alphaL("alphaL","alphaL",this,_alphaL),
  alphaR("alphaR","alphaR",this,_alphaR),
  nL("nL","nL",this,_nL),
  nR("nR","nR",this,_nR)
{ 
} 


BW_conv_dCB::BW_conv_dCB(const BW_conv_dCB& other, const char* name) :  
  RooAbsPdf(other,name), 
  m("m",this,other.m),
  mRes("mRes",this,other.mRes),
  m0("m0",this,other.m0),
  sigma("sigma",this,other.sigma),
  alphaL("alphaL",this,other.alphaL),
  alphaR("alphaR",this,other.alphaR),
  nL("nL",this,other.nL),
  nR("nR",this,other.nR)
{ 
} 



Double_t BW_conv_dCB::evaluate() const 
{
  TH1F* f=new TH1F("f","f",1000,m.min(),m.max());
  for(int i=1; i< f->GetSize() -2; i++){
    Double_t x=f->GetXaxis()->GetBinCenter(i);
    f->SetBinContent(i,getBW(x));
  }
  //f->SaveAs("f.root");

  TH1F* g=new TH1F("g","g",1000,m.min(),m.max());//m is fixed
  for(int i=1; i< g->GetSize() -2; i++){
    Double_t x_new;
    x_new= (m - g->GetXaxis()->GetBinCenter(i));
    g->SetBinContent(i,getdCB(x_new)); 
  }
  //g->SaveAs("g.root");
  
  Double_t x_final=0;
  for(int i=1; i< f->GetSize() -2; i++){
    x_final+=f->GetBinContent(i)*g->GetBinContent(i);
  }
  delete f;
  delete g;
  return x_final;
}



